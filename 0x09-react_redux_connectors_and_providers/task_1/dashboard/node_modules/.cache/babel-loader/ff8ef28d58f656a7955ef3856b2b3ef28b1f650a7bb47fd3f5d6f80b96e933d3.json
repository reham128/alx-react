{"ast":null,"code":"var _jsxFileName = \"/root/alx-react/0x04-React_inline_styling/task_1/dashboard/src/Notifications/Notifications.js\";\nimport React, { Component } from 'react';\nimport './Notifications.css';\nimport closeIcon from '../assets/close-icon.png';\nimport NotificationItem from './NotificationItem';\nimport PropTypes from 'prop-types';\nimport NotificationItemShape from './NotificationItemShape';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Notifications extends Component {\n  constructor(props) {\n    super(props);\n    this.markAsRead = this.markAsRead.bind(this);\n  }\n  shouldComponentUpdate(nextProps) {\n    return nextProps.listNotifications.length > this.props.listNotifications.length;\n  }\n  markAsRead(id) {\n    console.log(`Notification ${id} has been marked as read`);\n  }\n  render() {\n    const {\n      displayDrawer,\n      listNotifications\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menuItem\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), displayDrawer && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Notifications\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: listNotifications !== null && listNotifications !== void 0 && listNotifications.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Here is the list of notifications\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 19\n            }, this), listNotifications.map(({\n              id,\n              html,\n              type,\n              value\n            }) => /*#__PURE__*/_jsxDEV(NotificationItem, {\n              type: type,\n              value: value,\n              html: html,\n              id: id,\n              markAsRead: this.markAsRead\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"li\", {\n            \"data-notification-type\": \"default\",\n            children: \"No new notification for now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: 'none',\n            border: 'none',\n            position: 'absolute',\n            right: '.8rem',\n            top: '1rem',\n            cursor: 'pointer'\n          },\n          \"aria-label\": \"Close\",\n          onClick: () => console.log('Close button has been clicked'),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: closeIcon,\n            alt: \"closeIcon\",\n            width: \"18px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n}\nNotifications.propTypes = {\n  displayDrawer: PropTypes.bool,\n  listNotifications: PropTypes.arrayOf(NotificationItemShape)\n};\nNotifications.defaultProps = {\n  displayDrawer: false,\n  listNotifications: []\n};\nexport default Notifications;","map":{"version":3,"names":["React","Component","closeIcon","NotificationItem","PropTypes","NotificationItemShape","jsxDEV","_jsxDEV","Fragment","_Fragment","Notifications","constructor","props","markAsRead","bind","shouldComponentUpdate","nextProps","listNotifications","length","id","console","log","render","displayDrawer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","html","type","value","style","background","border","position","right","top","cursor","onClick","src","alt","width","propTypes","bool","arrayOf","defaultProps"],"sources":["/root/alx-react/0x04-React_inline_styling/task_1/dashboard/src/Notifications/Notifications.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './Notifications.css';\nimport closeIcon from '../assets/close-icon.png';\nimport NotificationItem from './NotificationItem';\nimport PropTypes from 'prop-types';\nimport NotificationItemShape from './NotificationItemShape';\n\n\nclass Notifications extends Component {\n  constructor(props) {\n    super(props);\n    this.markAsRead = this.markAsRead.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return (\n      nextProps.listNotifications.length > this.props.listNotifications.length\n    );\n  }\n  markAsRead(id) {\n    console.log(`Notification ${id} has been marked as read`);\n  }\n  render() {\n    const { displayDrawer, listNotifications } = this.props;\n\n    return (\n      <div className='notification-wrapper'>\n        <div className='menuItem'>\n          <p>Your notifications</p>\n        </div>\n        {displayDrawer && (\n          <div className='Notifications'>\n            <ul>\n              {listNotifications?.length ? (\n                <>\n                  <p>Here is the list of notifications</p>\n                  {listNotifications.map(({ id, html, type, value }) => (\n                    <NotificationItem\n                      key={id}\n                      type={type}\n                      value={value}\n                      html={html}\n                      id={id}\n                      markAsRead={this.markAsRead}\n                    />\n                  ))}\n                </>\n              ) : (\n                <li data-notification-type='default'>\n                  No new notification for now\n                </li>\n              )}\n            </ul>\n            <button\n              style={{\n                background: 'none',\n                border: 'none',\n                position: 'absolute',\n                right: '.8rem',\n                top: '1rem',\n                cursor: 'pointer',\n              }}\n              aria-label='Close'\n              onClick={() => console.log('Close button has been clicked')}\n            >\n              <img src={closeIcon} alt='closeIcon' width='18px' />\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nNotifications.propTypes = {\n  displayDrawer: PropTypes.bool,\n  listNotifications: PropTypes.arrayOf(NotificationItemShape),\n};\n\nNotifications.defaultProps = {\n  displayDrawer: false,\n  listNotifications: [],\n};\n\nexport default Notifications;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}