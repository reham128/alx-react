{"ast":null,"code":"var _jsxFileName = \"/root/alx-react/0x03-React_component/task_0/dashboard/src/Notifications/Notifications.js\";\nimport React from 'react';\nimport './Notifications.css';\nimport { getLatestNotification } from '../utils/utils';\nimport closeIcon from '../assets/close-icon.png';\nimport NotificationItem from './NotificationItem';\nimport PropTypes from 'prop-types';\nimport NotificationItemShape from './NotificationItemShape';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Notifications = ({\n  displayDrawer,\n  listNotifications\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menuItem\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your notifications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), displayDrawer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Notifications\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: listNotifications !== null && listNotifications !== void 0 && listNotifications.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Here is the list of notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 17\n          }, this), listNotifications.map(({\n            id,\n            html,\n            type,\n            value\n          }) => /*#__PURE__*/_jsxDEV(NotificationItem, {\n            type: type,\n            value: value,\n            html: html\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"li\", {\n          \"data-notification-type\": \"default\",\n          children: \"No new notification for now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          background: 'none',\n          border: 'none',\n          position: 'absolute',\n          right: '.8rem',\n          top: '1rem',\n          cursor: 'pointer'\n        },\n        \"aria-label\": \"Close\",\n        onClick: () => console.log('Close button has been clicked'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: closeIcon,\n          alt: \"closeIcon\",\n          width: \"18px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_c = Notifications;\nNotifications.defaultProps = {\n  displayDrawer: false,\n  listNotifications: []\n};\nNotifications.propTypes = {\n  displayDrawer: PropTypes.bool,\n  listNotifications: PropTypes.arrayOf(NotificationItemShape)\n};\nexport default Notifications;\nvar _c;\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"names":["React","getLatestNotification","closeIcon","NotificationItem","PropTypes","NotificationItemShape","jsxDEV","_jsxDEV","Fragment","_Fragment","Notifications","displayDrawer","listNotifications","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","id","html","type","value","style","background","border","position","right","top","cursor","onClick","console","log","src","alt","width","_c","defaultProps","propTypes","bool","arrayOf","$RefreshReg$"],"sources":["/root/alx-react/0x03-React_component/task_0/dashboard/src/Notifications/Notifications.js"],"sourcesContent":["import React from 'react';\nimport './Notifications.css';\nimport { getLatestNotification } from '../utils/utils';\nimport closeIcon from '../assets/close-icon.png';\nimport NotificationItem from './NotificationItem';\nimport PropTypes from 'prop-types';\nimport NotificationItemShape from './NotificationItemShape';\n\n\nconst Notifications = ({ displayDrawer, listNotifications }) => {\n  return (\n    <div className='notification-wrapper'>\n      <div className='menuItem'>\n        <p>Your notifications</p>\n      </div>\n      {displayDrawer && (\n        <div className='Notifications'>\n          <ul>\n            {listNotifications?.length ? (\n              <>\n                <p>Here is the list of notifications</p>\n                {listNotifications.map(({ id, html, type, value }) => (\n                  <NotificationItem\n                    key={id}\n                    type={type}\n                    value={value}\n                    html={html}\n                  />\n                ))}\n              </>\n            ) : (\n              <li data-notification-type='default'>\n                No new notification for now\n              </li>\n            )}\n          </ul>\n          <button\n            style={{\n              background: 'none',\n              border: 'none',\n              position: 'absolute',\n              right: '.8rem',\n              top: '1rem',\n              cursor: 'pointer',\n            }}\n            aria-label='Close'\n            onClick={() => console.log('Close button has been clicked')}\n          >\n            <img src={closeIcon} alt='closeIcon' width='18px' />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nNotifications.defaultProps = {\n  displayDrawer: false,\n  listNotifications: [],\n};\n\nNotifications.propTypes = {\n  displayDrawer: PropTypes.bool,\n  listNotifications: PropTypes.arrayOf(NotificationItemShape),\n};\n\nexport default Notifications;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}